#This code computes the likelihood of a given phylogeny under various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper), with parameters lamb0,alpha,mu0 and beta, and diversity N0#
getLikelihood.coalBD <- function(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)#
# The extinction rate is forced to be less than the speciation rate over the history of the clade#
#
{#
	#
	Ttimes <- diff(Vtimes)#
	Vtimes <- Vtimes[2:length(Vtimes)]#
	nbint<-length(Ttimes)#
	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1)#
	#
	times<-c(0,sort(Vtimes))#
	#
	if (min(abs(lamb0)*exp(alpha*times)-abs(mu0)*exp(beta*times))<=0)#
		{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
		}#
	#
	else if ((alpha==0) & (beta==0)) #
		{	if (pos==FALSE)#
			{r<-lamb0-mu0#
			indLikelihood<-samp*(samp+1)/2*2*lamb0/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*lamb0/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			else #
			{r<-abs(abs(lamb0)-abs(mu0))#
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			res<-sum(log(indLikelihood))#
			}#
				#
	else#
	#
	{		#
	if ((beta==0) & !(alpha==0))#
		{	if (pos==FALSE) #
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))+mu0*x))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}#
			}#
			#
	else if ((alpha==0) & !(beta==0))#
		{	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0/(N0*exp(-lamb0*x-mu0/beta*(1-exp(beta*x))))}}#
			else #
			{demfun<-function(x){2*abs(lamb0)/(N0*exp(-abs(lamb0)*x-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}#
			#
	else {	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))-mu0/beta*(1-exp(beta*x))))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}#
	#
		#
	if (FALSE %in% is.finite(demfun(Vtimes)))#
	{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))}#
		#
	else#
	{	#
	integrals<-c()#
	demfunval<-c()#
	#
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)}#
				#
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)#
		res<-sum(log(indLikelihood))#
		}		#
		}	#
		#
		return(list("res"=res,"all"=indLikelihood))}
#This code fits various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper) to a given phylogeny, by maximum likelihood, using the Nelder-Mead algorithm#
#Outputs are the log-likelihood, the second order Akaike's Information Criterion, and the maximum likelihood estimates of the parameters of diversification. Depending on the model, these parameters include a combination of the speciation rate at present (lamb0), the exponential variation in speciation rate (alpha), the extinction rate at present (mu0), the exponential variation in extinction rate (beta) and the extinction fraction (extinction rate/speciation rate, eps). See notations in the PloSB 2010 paper.#
#The code uses the ape package#
#The code uses the getLikelihood.coalBD code. use source("getLikelihood.coalBD.r") #
#
fitcoalBD<-function (phylo,lamb0=0.1,alpha=1,mu0=0.01,beta=0,meth = "Nelder-Mead",N0=0,cst.lamb=FALSE,cst.mu=FALSE,fix.eps=FALSE,mu.0=FALSE,pos=TRUE,Vtimes=FALSE)#
#
#The default settings allow to fit the most general model where the rates of speciation and extinction vary over time without a fixed extinction fraction (Model 4d from the PloSB 2010 paper). cst.lamb=TRUE forces the speciation rate to be constant over time (used to fit Models 3, 5 and 4b). cst.mu=TRUE forces the extinction rate to be constant over time (used to fit Models 3, and 4a). fix.eps forces the extinction fraction to be constant over time (used to fit Model 4c). mu.0=TRUE forces the extinction rate to 0 (used to fit Models 5 and 6).#
#pos=TRUE (the default) forces the rates of speciation and extinction to be positive. pos=FALSE removes this forcing.#
#
{#
	if (Vtimes==TRUE) {#
		Vtimes<-sort(phylo)#
		Ntips<-length(phylo)+1#
		if (N0==0) {N0<-Ntips}#
		}#
		#
	else{#
		Vtimes <- sort(branching.times(phylo))#
		Ntips<-Ntip(phylo)#
		if (N0==0) {N0<-Ntips}#
		}#
			 #
    nbobs<-length(Vtimes)-1#
			#
#
	#pure birth	constant rates (Model 5)	#
	if (mu.0==TRUE & cst.lamb==TRUE)#
	{init<-c(lamb0)}#
	#
	#birth-death constant rates	(Model 3)#
	else if (cst.mu==TRUE & cst.lamb==TRUE) #
    {init <- c(lamb0,mu0)}#
	#
	#pure birth varying speciation rate (Model 6)#
	else if (mu.0==TRUE & cst.lamb==FALSE)#
	{init<-c(lamb0,alpha)}#
		#
	#birth-death varying speciation rate (Model 4a)#
	else if (cst.mu==TRUE & cst.lamb==FALSE) #
    {init <- c(lamb0,alpha,mu0)}#
    	#
    #birth-death varying extinction rate (Model 4b)#
    else if (cst.mu==FALSE & cst.lamb==TRUE)#
   	{init <- c(lamb0,mu0,beta)}#
    #
    #birth-death varying speciation rate and constant extinction fraction (Model 4c)#
    else if (fix.eps==TRUE)#
    {init <- c(lamb0,alpha,mu0/lamb0)}#
    #
    #birth-death varying speciation and extinction rates (Model 4d)	#
    else#
    {init = c(lamb0,alpha,mu0,beta)}#
#
	nbpar<-length(init)#
	    	#
############################################################	#
    #
    if (mu.0==TRUE & cst.lamb==TRUE)#
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0=0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
        #
    else if (cst.mu==TRUE & cst.lamb==TRUE) #
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        mu0 <- init[2]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
    #
    else if (mu.0==TRUE & cst.lamb==FALSE)#
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0=0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
    #
    else if (cst.mu==TRUE & cst.lamb==FALSE) #
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
	#
	else if (cst.mu==FALSE & cst.lamb==TRUE)#
	{optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        mu0 <- init[2]#
        beta<- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0,beta,N0,pos=pos)$res#
        return(-LH)}#
        }#
     #
     else if (fix.eps==TRUE)#
     {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        eps <- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,d=lamb0*eps,beta=alpha,N0,pos=pos)$res#
        return(-LH)}#
        }#
        #
      else#
      #
     {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        beta <- init[4]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=pos)$res#
        return(-LH)}#
        }#
  #
  #######################################################################################    #
   	#
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))#
#
		if (mu.0==TRUE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Pure birth constant speciation", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1])}#
    	else#
    	{res <- list(model = "Pure birth constant speciation", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]))}}#
        #
        else if (cst.mu==TRUE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant rates", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1],mu0 = temp$par[2])}#
    	else#
    	{res <- list(model = "Birth-death constant rates", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]),mu0 = abs(temp$par[2]))}}#
#
		else if (mu.0==TRUE & cst.lamb==FALSE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Pure birth varying speciation", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2])}#
    	else#
    	{res <- list(model = "Pure birth varying speciation", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2])}}#
        #
        else if (cst.mu==TRUE & cst.lamb==FALSE) #
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death varying speciation constant extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], mu0 = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death varying speciation constant extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], mu0 = abs(temp$par[3]))}}#
        #
        else if (cst.mu==FALSE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant speciation varying extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], mu0 = temp$par[2], beta = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death constant speciation varying extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), mu0 = abs(temp$par[2]), beta = temp$par[3])}}#
#
        else if (fix.eps==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant extinction fraction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], eps = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death constant extinction fraction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], eps = abs(temp$par[3]))}}#
        #
        else#
        {#
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death varying speciation and extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], mu0 = temp$par[3],beta = temp$par[4])}#
    	else#
    	{res <- list(model = "Birth-death varying speciation and extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], mu0 = abs(temp$par[3]),beta = temp$par[4])}}#
#
             #
        return(res)#
}
foo <- fitcoalBD(phylo)
phylo=sim.bd.taxa.age(100, 1, lambda=0.1, mu=0.01, age=100, mrca=T)[[1]]
plot(phylo)
foo <- fitcoalBD(phylo)
foo <- fitcoalBD(phylo, cst.LAMB=T)
foo <- fitcoalBD(phylo,cst.lamb=TRUE)
foo
Rprof()
foo <- fitcoalBD(phylo,cst.lamb=TRUE)
summary.rprof()
rprof.summary()
?rprof
?Rprof
summaryRprof
summaryRprof()
integrals<-c()
demfunval<-c()
Vtimes=FALSE
if (Vtimes==TRUE) {#
		Vtimes<-sort(phylo)#
		Ntips<-length(phylo)+1#
		if (N0==0) {N0<-Ntips}#
		}#
		#
	else{#
		Vtimes <- sort(branching.times(phylo))#
		Ntips<-Ntip(phylo)#
		if (N0==0) {N0<-Ntips}#
		}
	if (Vtimes==TRUE) {#
		Vtimes<-sort(phylo)#
		Ntips<-length(phylo)+1#
		if (N0==0) {N0<-Ntips}#
		} else {#
		Vtimes <- sort(branching.times(phylo))#
		Ntips<-Ntip(phylo)#
		if (N0==0) {N0<-Ntips}#
		}
#This code fits various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper) to a given phylogeny, by maximum likelihood, using the Nelder-Mead algorithm#
#Outputs are the log-likelihood, the second order Akaike's Information Criterion, and the maximum likelihood estimates of the parameters of diversification. Depending on the model, these parameters include a combination of the speciation rate at present (lamb0), the exponential variation in speciation rate (alpha), the extinction rate at present (mu0), the exponential variation in extinction rate (beta) and the extinction fraction (extinction rate/speciation rate, eps). See notations in the PloSB 2010 paper.#
#The code uses the ape package#
#The code uses the getLikelihood.coalBD code. use source("getLikelihood.coalBD.r") #
#
fitcoalBD<-function (phylo,lamb0=0.1,alpha=1,mu0=0.01,beta=0,meth = "Nelder-Mead",N0=0,cst.lamb=FALSE,cst.mu=FALSE,fix.eps=FALSE,mu.0=FALSE,pos=TRUE,Vtimes=FALSE)#
#
#The default settings allow to fit the most general model where the rates of speciation and extinction vary over time without a fixed extinction fraction (Model 4d from the PloSB 2010 paper). cst.lamb=TRUE forces the speciation rate to be constant over time (used to fit Models 3, 5 and 4b). cst.mu=TRUE forces the extinction rate to be constant over time (used to fit Models 3, and 4a). fix.eps forces the extinction fraction to be constant over time (used to fit Model 4c). mu.0=TRUE forces the extinction rate to 0 (used to fit Models 5 and 6).#
#pos=TRUE (the default) forces the rates of speciation and extinction to be positive. pos=FALSE removes this forcing.#
#
{#
	if (Vtimes==TRUE) {#
		Vtimes<-sort(phylo)#
		Ntips<-length(phylo)+1#
		if (N0==0) {N0<-Ntips}#
		} else {#
		Vtimes <- sort(branching.times(phylo))#
		Ntips<-Ntip(phylo)#
		if (N0==0) {N0<-Ntips}#
		}#
			 #
    nbobs<-length(Vtimes)-1#
			#
#
	#pure birth	constant rates (Model 5)	#
	if (mu.0==TRUE & cst.lamb==TRUE)#
	{init<-c(lamb0)}#
	#
	#birth-death constant rates	(Model 3)#
	else if (cst.mu==TRUE & cst.lamb==TRUE) #
    {init <- c(lamb0,mu0)}#
	#
	#pure birth varying speciation rate (Model 6)#
	else if (mu.0==TRUE & cst.lamb==FALSE)#
	{init<-c(lamb0,alpha)}#
		#
	#birth-death varying speciation rate (Model 4a)#
	else if (cst.mu==TRUE & cst.lamb==FALSE) #
    {init <- c(lamb0,alpha,mu0)}#
    	#
    #birth-death varying extinction rate (Model 4b)#
    else if (cst.mu==FALSE & cst.lamb==TRUE)#
   	{init <- c(lamb0,mu0,beta)}#
    #
    #birth-death varying speciation rate and constant extinction fraction (Model 4c)#
    else if (fix.eps==TRUE)#
    {init <- c(lamb0,alpha,mu0/lamb0)}#
    #
    #birth-death varying speciation and extinction rates (Model 4d)	#
    else#
    {init = c(lamb0,alpha,mu0,beta)}#
#
	nbpar<-length(init)#
	    	#
############################################################	#
    #
    if (mu.0==TRUE & cst.lamb==TRUE)#
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0=0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
        #
    else if (cst.mu==TRUE & cst.lamb==TRUE) #
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        mu0 <- init[2]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
    #
    else if (mu.0==TRUE & cst.lamb==FALSE)#
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0=0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
    #
    else if (cst.mu==TRUE & cst.lamb==FALSE) #
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
	#
	else if (cst.mu==FALSE & cst.lamb==TRUE)#
	{optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        mu0 <- init[2]#
        beta<- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0,beta,N0,pos=pos)$res#
        return(-LH)}#
        }#
     #
     else if (fix.eps==TRUE)#
     {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        eps <- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,d=lamb0*eps,beta=alpha,N0,pos=pos)$res#
        return(-LH)}#
        }#
        #
      else#
      #
     {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        beta <- init[4]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=pos)$res#
        return(-LH)}#
        }#
  #
  #######################################################################################    #
   	#
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))#
#
		if (mu.0==TRUE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Pure birth constant speciation", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1])}#
    	else#
    	{res <- list(model = "Pure birth constant speciation", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]))}}#
        #
        else if (cst.mu==TRUE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant rates", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1],mu0 = temp$par[2])}#
    	else#
    	{res <- list(model = "Birth-death constant rates", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]),mu0 = abs(temp$par[2]))}}#
#
		else if (mu.0==TRUE & cst.lamb==FALSE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Pure birth varying speciation", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2])}#
    	else#
    	{res <- list(model = "Pure birth varying speciation", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2])}}#
        #
        else if (cst.mu==TRUE & cst.lamb==FALSE) #
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death varying speciation constant extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], mu0 = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death varying speciation constant extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], mu0 = abs(temp$par[3]))}}#
        #
        else if (cst.mu==FALSE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant speciation varying extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], mu0 = temp$par[2], beta = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death constant speciation varying extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), mu0 = abs(temp$par[2]), beta = temp$par[3])}}#
#
        else if (fix.eps==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant extinction fraction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], eps = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death constant extinction fraction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], eps = abs(temp$par[3]))}}#
        #
        else#
        {#
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death varying speciation and extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], mu0 = temp$par[3],beta = temp$par[4])}#
    	else#
    	{res <- list(model = "Birth-death varying speciation and extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], mu0 = abs(temp$par[3]),beta = temp$par[4])}}#
#
             #
        return(res)#
}
if (Vtimes==TRUE) {#
		Vtimes<-sort(phylo)#
		Ntips<-length(phylo)+1#
		if (N0==0) {N0<-Ntips}#
		} else {#
		Vtimes <- sort(branching.times(phylo))#
		Ntips<-Ntip(phylo)#
		if (N0==0) {N0<-Ntips}#
		}
N0=0
	if (Vtimes==TRUE) {#
		Vtimes<-sort(phylo)#
		Ntips<-length(phylo)+1#
		if (N0==0) {N0<-Ntips}#
		} else {#
		Vtimes <- sort(branching.times(phylo))#
		Ntips<-Ntip(phylo)#
		if (N0==0) {N0<-Ntips}#
		}
		Vtimes <- sort(branching.times(phylo))
		Ntips<-Ntip(phylo)
N0<-Ntips
	Ttimes <- diff(Vtimes)#
	Vtimes <- Vtimes[2:length(Vtimes)]#
	nbint<-length(Ttimes)#
	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1)#
	#
	times<-c(0,sort(Vtimes))
times
fool <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)
lamb0=0.1
fool <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)
alpha=1
mu0=0.01
beta=0
fool <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)
fool
    nbobs<-length(Vtimes)-1#
			#
#
	#pure birth	constant rates (Model 5)	#
	if (mu.0==TRUE & cst.lamb==TRUE)#
	{init<-c(lamb0)}#
	#
	#birth-death constant rates	(Model 3)#
	else if (cst.mu==TRUE & cst.lamb==TRUE) #
    {init <- c(lamb0,mu0)}#
	#
	#pure birth varying speciation rate (Model 6)#
	else if (mu.0==TRUE & cst.lamb==FALSE)#
	{init<-c(lamb0,alpha)}#
		#
	#birth-death varying speciation rate (Model 4a)#
	else if (cst.mu==TRUE & cst.lamb==FALSE) #
    {init <- c(lamb0,alpha,mu0)}#
    	#
    #birth-death varying extinction rate (Model 4b)#
    else if (cst.mu==FALSE & cst.lamb==TRUE)#
   	{init <- c(lamb0,mu0,beta)}#
    #
    #birth-death varying speciation rate and constant extinction fraction (Model 4c)#
    else if (fix.eps==TRUE)#
    {init <- c(lamb0,alpha,mu0/lamb0)}#
    #
    #birth-death varying speciation and extinction rates (Model 4d)	#
    else#
    {init = c(lamb0,alpha,mu0,beta)}#
#
	nbpar<-length(init)#
	    	#
############################################################	#
    #
    if (mu.0==TRUE & cst.lamb==TRUE)#
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0=0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
        #
    else if (cst.mu==TRUE & cst.lamb==TRUE) #
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        mu0 <- init[2]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
    #
    else if (mu.0==TRUE & cst.lamb==FALSE)#
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0=0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
    #
    else if (cst.mu==TRUE & cst.lamb==FALSE) #
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
	#
	else if (cst.mu==FALSE & cst.lamb==TRUE)#
	{optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        mu0 <- init[2]#
        beta<- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0,beta,N0,pos=pos)$res#
        return(-LH)}#
        }#
     #
     else if (fix.eps==TRUE)#
     {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        eps <- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,d=lamb0*eps,beta=alpha,N0,pos=pos)$res#
        return(-LH)}#
        }#
        #
      else#
      #
     {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        beta <- init[4]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=pos)$res#
        return(-LH)}#
        }
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0=0,beta=0,N0,pos=pos)$res
pos=TRUE
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0=0,beta=0,N0,pos=pos)$res
LH
rm(fool)
Rprof()
foo <- fitcoalBD(phylo,cst.lamb=TRUE)
summaryRprof()
for (i in 1:length(Vtimes))#
{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
}
#This code fits various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper) to a given phylogeny, by maximum likelihood, using the Nelder-Mead algorithm#
#Outputs are the log-likelihood, the second order Akaike's Information Criterion, and the maximum likelihood estimates of the parameters of diversification. Depending on the model, these parameters include a combination of the speciation rate at present (lamb0), the exponential variation in speciation rate (alpha), the extinction rate at present (mu0), the exponential variation in extinction rate (beta) and the extinction fraction (extinction rate/speciation rate, eps). See notations in the PloSB 2010 paper.#
#The code uses the ape package#
#The code uses the getLikelihood.coalBD code. use source("getLikelihood.coalBD.r") #
#
fitcoalBD<-function (phylo,lamb0=0.1,alpha=1,mu0=0.01,beta=0,meth = "Nelder-Mead",N0=0,cst.lamb=FALSE,cst.mu=FALSE,fix.eps=FALSE,mu.0=FALSE,pos=TRUE,Vtimes=FALSE)#
#
#The default settings allow to fit the most general model where the rates of speciation and extinction vary over time without a fixed extinction fraction (Model 4d from the PloSB 2010 paper). cst.lamb=TRUE forces the speciation rate to be constant over time (used to fit Models 3, 5 and 4b). cst.mu=TRUE forces the extinction rate to be constant over time (used to fit Models 3, and 4a). fix.eps forces the extinction fraction to be constant over time (used to fit Model 4c). mu.0=TRUE forces the extinction rate to 0 (used to fit Models 5 and 6).#
#pos=TRUE (the default) forces the rates of speciation and extinction to be positive. pos=FALSE removes this forcing.#
#
{#
	if (Vtimes==TRUE) {#
		Vtimes<-sort(phylo)#
		Ntips<-length(phylo)+1#
		if (N0==0) {N0<-Ntips}#
		} else {#
		Vtimes <- sort(branching.times(phylo))#
		Ntips<-Ntip(phylo)#
		if (N0==0) {N0<-Ntips}#
		}#
			 #
    nbobs<-length(Vtimes)-1#
			#
#
	#pure birth	constant rates (Model 5)	#
	if (mu.0==TRUE & cst.lamb==TRUE)#
	{init<-c(lamb0)}#
	#
	#birth-death constant rates	(Model 3)#
	else if (cst.mu==TRUE & cst.lamb==TRUE) #
    {init <- c(lamb0,mu0)}#
	#
	#pure birth varying speciation rate (Model 6)#
	else if (mu.0==TRUE & cst.lamb==FALSE)#
	{init<-c(lamb0,alpha)}#
		#
	#birth-death varying speciation rate (Model 4a)#
	else if (cst.mu==TRUE & cst.lamb==FALSE) #
    {init <- c(lamb0,alpha,mu0)}#
    	#
    #birth-death varying extinction rate (Model 4b)#
    else if (cst.mu==FALSE & cst.lamb==TRUE)#
   	{init <- c(lamb0,mu0,beta)}#
    #
    #birth-death varying speciation rate and constant extinction fraction (Model 4c)#
    else if (fix.eps==TRUE)#
    {init <- c(lamb0,alpha,mu0/lamb0)}#
    #
    #birth-death varying speciation and extinction rates (Model 4d)	#
    else#
    {init = c(lamb0,alpha,mu0,beta)}#
#
	nbpar<-length(init)#
	    	#
############################################################	#
    #
    if (mu.0==TRUE & cst.lamb==TRUE)#
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0=0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
        #
    else if (cst.mu==TRUE & cst.lamb==TRUE) #
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        mu0 <- init[2]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
    #
    else if (mu.0==TRUE & cst.lamb==FALSE)#
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0=0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
    #
    else if (cst.mu==TRUE & cst.lamb==FALSE) #
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
	#
	else if (cst.mu==FALSE & cst.lamb==TRUE)#
	{optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        mu0 <- init[2]#
        beta<- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0,beta,N0,pos=pos)$res#
        return(-LH)}#
        }#
     #
     else if (fix.eps==TRUE)#
     {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        eps <- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,d=lamb0*eps,beta=alpha,N0,pos=pos)$res#
        return(-LH)}#
        }#
        #
      else#
      #
     {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        beta <- init[4]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=pos)$res#
        return(-LH)}#
        }#
  #
  #######################################################################################    #
   	#
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))#
#
		if (mu.0==TRUE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Pure birth constant speciation", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1])}#
    	else#
    	{res <- list(model = "Pure birth constant speciation", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]))}}#
        #
        else if (cst.mu==TRUE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant rates", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1],mu0 = temp$par[2])}#
    	else#
    	{res <- list(model = "Birth-death constant rates", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]),mu0 = abs(temp$par[2]))}}#
#
		else if (mu.0==TRUE & cst.lamb==FALSE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Pure birth varying speciation", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2])}#
    	else#
    	{res <- list(model = "Pure birth varying speciation", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2])}}#
        #
        else if (cst.mu==TRUE & cst.lamb==FALSE) #
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death varying speciation constant extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], mu0 = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death varying speciation constant extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], mu0 = abs(temp$par[3]))}}#
        #
        else if (cst.mu==FALSE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant speciation varying extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], mu0 = temp$par[2], beta = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death constant speciation varying extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), mu0 = abs(temp$par[2]), beta = temp$par[3])}}#
#
        else if (fix.eps==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant extinction fraction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], eps = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death constant extinction fraction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], eps = abs(temp$par[3]))}}#
        #
        else#
        {#
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death varying speciation and extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], mu0 = temp$par[3],beta = temp$par[4])}#
    	else#
    	{res <- list(model = "Birth-death varying speciation and extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], mu0 = abs(temp$par[3]),beta = temp$par[4])}}#
#
             #
        return(res)#
}
#This code computes the likelihood of a given phylogeny under various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper), with parameters lamb0,alpha,mu0 and beta, and diversity N0#
getLikelihood.coalBD <- function(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)#
# The extinction rate is forced to be less than the speciation rate over the history of the clade#
#
{#
	#
	Ttimes <- diff(Vtimes)#
	Vtimes <- Vtimes[2:length(Vtimes)]#
	nbint<-length(Ttimes)#
	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1)#
	#
	times<-c(0,sort(Vtimes))#
	#
	if (min(abs(lamb0)*exp(alpha*times)-abs(mu0)*exp(beta*times))<=0)#
		{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
		}#
	#
	else if ((alpha==0) & (beta==0)) #
		{	if (pos==FALSE)#
			{r<-lamb0-mu0#
			indLikelihood<-samp*(samp+1)/2*2*lamb0/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*lamb0/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			else #
			{r<-abs(abs(lamb0)-abs(mu0))#
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			res<-sum(log(indLikelihood))#
			}#
				#
	else#
	#
	{		#
	if ((beta==0) & !(alpha==0))#
		{	if (pos==FALSE) #
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))+mu0*x))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}#
			}#
			#
	else if ((alpha==0) & !(beta==0))#
		{	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0/(N0*exp(-lamb0*x-mu0/beta*(1-exp(beta*x))))}}#
			else #
			{demfun<-function(x){2*abs(lamb0)/(N0*exp(-abs(lamb0)*x-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}#
			#
	else {	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))-mu0/beta*(1-exp(beta*x))))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}#
	#
		#
	if (FALSE %in% is.finite(demfun(Vtimes)))#
	{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))}#
		#
	else#
	{	#
	integrals<-c()#
	demfunval<-c()#
	#
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)}#
				#
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)#
		res<-sum(log(indLikelihood))#
		}		#
		}	#
		#
		return(list("res"=res,"all"=indLikelihood))}
for (i in 1:length(Vtimes))#
{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
}
??demfun
#This code computes the likelihood of a given phylogeny under various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper), with parameters lamb0,alpha,mu0 and beta, and diversity N0#
getLikelihood.coalBD <- function(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)#
# The extinction rate is forced to be less than the speciation rate over the history of the clade#
#
{#
	#
	Ttimes <- diff(Vtimes)#
	Vtimes <- Vtimes[2:length(Vtimes)]#
	nbint<-length(Ttimes)#
	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1)#
	#
	times<-c(0,sort(Vtimes))#
	#
	if (min(abs(lamb0)*exp(alpha*times)-abs(mu0)*exp(beta*times))<=0)#
		{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
		}#
	#
	else if ((alpha==0) & (beta==0)) #
		{	if (pos==FALSE)#
			{r<-lamb0-mu0#
			indLikelihood<-samp*(samp+1)/2*2*lamb0/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*lamb0/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			else #
			{r<-abs(abs(lamb0)-abs(mu0))#
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			res<-sum(log(indLikelihood))#
			}#
				#
	else#
	#
	{		#
	if ((beta==0) & !(alpha==0))#
		{	#
			if (pos==FALSE) #
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))+mu0*x))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}#
			} else if ((alpha==0) & !(beta==0))#
		{	#
			if (pos==FALSE)#
			{demfun<-function(x){2*lamb0/(N0*exp(-lamb0*x-mu0/beta*(1-exp(beta*x))))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)/(N0*exp(-abs(lamb0)*x-abs(mu0)/beta*(1-exp(beta*x))))}}#
			} else {	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))-mu0/beta*(1-exp(beta*x))))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}#
	#
		#
	if (FALSE %in% is.finite(demfun(Vtimes)))#
	{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
	} else {	#
	integrals<-c()#
	demfunval<-c()#
	#
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)}#
				#
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)#
		res<-sum(log(indLikelihood))#
		}		#
		}	#
		#
		return(list("res"=res,"all"=indLikelihood))#
}
length(Vtimes)
Vtimes
		demfunvali<-demfun(Vtimes[i])
demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}
demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}
demfun
		demfunvali<-demfun(Vtimes[i])
demfunvali
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value
		demfunval<-c(demfunval,demfunvali)
		integrals<-c(integrals,integrali)}
		integrals<-c(integrals,integrali)
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)
		res<-sum(log(indLikelihood))
res
beta
lamb0=0.1; alpha=1; mu0=0.01; beta=0
Vtimes
rm(Vtimes)
Vtimes=TRUE
Vtimes==TRUE
if (Vtimes==TRUE) {#
		Vtimes<-sort(phylo)#
		Ntips<-length(phylo)+1#
		if (N0==0) {N0<-Ntips}#
		} else {#
		Vtimes <- sort(branching.times(phylo))#
		Ntips<-Ntip(phylo)#
		if (N0==0) {N0<-Ntips}#
		}
		Vtimes <- sort(branching.times(phylo))
		Ntips<-Ntip(phylo)
N0<-Ntips
mu.0==TRUE & cst.lamb==TRUE
mu0=0.01
beta=0
mu.0==TRUE & cst.lamb==TRUE
lamb0=0.1;alpha=1;mu0=0.01;beta=0;N0=0;cst.lamb=FALSE;cst.mu=FALSE;fix.eps=FALSE;mu.0=FALSE;pos=TRUE;Vtimes=FALSE;
mu.0==TRUE & cst.lamb==TRUE
cst.mu==TRUE & cst.lamb==TRUE
mu.0==TRUE & cst.lamb==FALSE
cst.mu==TRUE & cst.lamb==FALSE
cst.mu==FALSE & cst.lamb==TRUE
fix.eps==TRUE
init = c(lamb0,alpha,mu0,beta)
init
	nbpar<-length(init)
nbpar
optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        beta <- init[4]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=pos)$res#
        return(-LH)}
optimLH.coalBD
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))
lamb0=0.1;alpha=1;mu0=0.01;beta=0;N0=0;cst.lamb=FALSE;cst.mu=FALSE;fix.eps=FALSE;mu.0=FALSE;pos=TRUE;Vtimes=FALSE;meth = "Nelder-Mead";
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))
? optim
optimLH.coalBD
#This code computes the likelihood of a given phylogeny under various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper), with parameters lamb0,alpha,mu0 and beta, and diversity N0#
getLikelihood.coalBD <- function(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)#
# The extinction rate is forced to be less than the speciation rate over the history of the clade#
#
{#
	#
	Ttimes <- diff(Vtimes)#
	Vtimes <- Vtimes[2:length(Vtimes)]#
	nbint<-length(Ttimes)#
	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1)#
	#
	times<-c(0,sort(Vtimes))#
	#
	if (min(abs(lamb0)*exp(alpha*times)-abs(mu0)*exp(beta*times))<=0)#
		{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
		}#
	#
	else if ((alpha==0) & (beta==0)) #
		{	if (pos==FALSE)#
			{r<-lamb0-mu0#
			indLikelihood<-samp*(samp+1)/2*2*lamb0/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*lamb0/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			else #
			{r<-abs(abs(lamb0)-abs(mu0))#
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			res<-sum(log(indLikelihood))#
			}#
				#
	else#
	#
	{		#
	if ((beta==0) & !(alpha==0))#
		{	#
			if (pos==FALSE) #
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))+mu0*x))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}#
			} else if ((alpha==0) & !(beta==0))#
		{	#
			if (pos==FALSE)#
			{demfun<-function(x){2*lamb0/(N0*exp(-lamb0*x-mu0/beta*(1-exp(beta*x))))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)/(N0*exp(-abs(lamb0)*x-abs(mu0)/beta*(1-exp(beta*x))))}}#
			} else {	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))-mu0/beta*(1-exp(beta*x))))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}#
	#
		#
	if (FALSE %in% is.finite(demfun(Vtimes)))#
	{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
	} else {	#
	integrals<-c()#
	demfunval<-c()#
	#
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
		}#
				#
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)#
		res<-sum(log(indLikelihood))#
		}		#
		}	#
		#
		return(list("res"=res,"all"=indLikelihood))#
}
optimLH.coalBD
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))
seq((Ntips-2),(Ntips-nbint-1),by=-1)
	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1)
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))
?seq.default
samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1)
seq((Ntips-2),(Ntips-nbint-1),by=-1)
seq((Ntips-2),(Ntips-nbint-1))
Ntips-2
Ntips-nbint-1
#This code computes the likelihood of a given phylogeny under various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper), with parameters lamb0,alpha,mu0 and beta, and diversity N0#
getLikelihood.coalBD <- function(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)#
# The extinction rate is forced to be less than the speciation rate over the history of the clade#
#
{#
	#
	Ttimes <- diff(Vtimes)#
	Vtimes <- Vtimes[2:length(Vtimes)]#
	nbint<-length(Ttimes)#
#	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1) # by=-1 shouldn't be necessary#
	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1)#
	#
	times<-c(0,sort(Vtimes))#
	#
	if (min(abs(lamb0)*exp(alpha*times)-abs(mu0)*exp(beta*times))<=0)#
		{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
		}#
	#
	else if ((alpha==0) & (beta==0)) #
		{	if (pos==FALSE)#
			{r<-lamb0-mu0#
			indLikelihood<-samp*(samp+1)/2*2*lamb0/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*lamb0/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			else #
			{r<-abs(abs(lamb0)-abs(mu0))#
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			res<-sum(log(indLikelihood))#
			}#
				#
	else#
	#
	{		#
	if ((beta==0) & !(alpha==0))#
		{	#
			if (pos==FALSE) #
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))+mu0*x))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}#
			} else if ((alpha==0) & !(beta==0))#
		{	#
			if (pos==FALSE)#
			{demfun<-function(x){2*lamb0/(N0*exp(-lamb0*x-mu0/beta*(1-exp(beta*x))))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)/(N0*exp(-abs(lamb0)*x-abs(mu0)/beta*(1-exp(beta*x))))}}#
			} else {	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))-mu0/beta*(1-exp(beta*x))))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}#
	#
		#
	if (FALSE %in% is.finite(demfun(Vtimes)))#
	{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
	} else {	#
	integrals<-c()#
	demfunval<-c()#
	#
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
		}#
				#
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)#
		res<-sum(log(indLikelihood))#
		}		#
		}	#
		#
		return(list("res"=res,"all"=indLikelihood))#
}
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))
optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        beta <- init[4]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=pos)$res#
        return(-LH)}
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))
getLikelihood.coalBD
#This code computes the likelihood of a given phylogeny under various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper), with parameters lamb0,alpha,mu0 and beta, and diversity N0#
getLikelihood.coalBD <- function(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)#
# The extinction rate is forced to be less than the speciation rate over the history of the clade#
#
{#
	#
	Ttimes <- diff(Vtimes)#
	Vtimes <- Vtimes[2:length(Vtimes)]#
	nbint<-length(Ttimes)#
#	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1) # by=-1 shouldn't be necessary#
	samp<-seq((Ntips-2),(Ntips-nbint-1))#
	#
	times<-c(0,sort(Vtimes))#
	#
	if (min(abs(lamb0)*exp(alpha*times)-abs(mu0)*exp(beta*times))<=0)#
		{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
		}#
	#
	else if ((alpha==0) & (beta==0)) #
		{	if (pos==FALSE)#
			{r<-lamb0-mu0#
			indLikelihood<-samp*(samp+1)/2*2*lamb0/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*lamb0/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			else #
			{r<-abs(abs(lamb0)-abs(mu0))#
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			res<-sum(log(indLikelihood))#
			}#
				#
	else#
	#
	{		#
	if ((beta==0) & !(alpha==0))#
		{	#
			if (pos==FALSE) #
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))+mu0*x))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}#
			} else if ((alpha==0) & !(beta==0))#
		{	#
			if (pos==FALSE)#
			{demfun<-function(x){2*lamb0/(N0*exp(-lamb0*x-mu0/beta*(1-exp(beta*x))))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)/(N0*exp(-abs(lamb0)*x-abs(mu0)/beta*(1-exp(beta*x))))}}#
			} else {	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))-mu0/beta*(1-exp(beta*x))))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}#
	#
		#
	if (FALSE %in% is.finite(demfun(Vtimes)))#
	{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
	} else {	#
	integrals<-c()#
	demfunval<-c()#
	#
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
		}#
				#
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)#
		res<-sum(log(indLikelihood))#
		}		#
		}	#
		#
		return(list("res"=res,"all"=indLikelihood))#
}
optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        beta <- init[4]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=pos)$res#
        return(-LH)}
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))
getLikelihood.coalBD
#This code computes the likelihood of a given phylogeny under various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper), with parameters lamb0,alpha,mu0 and beta, and diversity N0#
getLikelihood.coalBD <- function(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)#
# The extinction rate is forced to be less than the speciation rate over the history of the clade#
{#
	Ttimes <- diff(Vtimes)#
	Vtimes <- Vtimes[2:length(Vtimes)]#
	nbint<-length(Ttimes)#
#	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1) # by=-1 shouldn't be necessary#
	samp<-seq((Ntips-2),(Ntips-nbint-1))#
	#
	times<-c(0,sort(Vtimes))#
	#
	if (min(abs(lamb0)*exp(alpha*times)-abs(mu0)*exp(beta*times))<=0)#
		{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
		}#
	#
	else if ((alpha==0) & (beta==0)) #
		{	if (pos==FALSE)#
			{r<-lamb0-mu0#
			indLikelihood<-samp*(samp+1)/2*2*lamb0/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*lamb0/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			else #
			{r<-abs(abs(lamb0)-abs(mu0))#
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			res<-sum(log(indLikelihood))#
			}#
				#
	else#
	#
	{		#
	if ((beta==0) & !(alpha==0))#
		{	#
			if (pos==FALSE) #
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))+mu0*x))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}#
			} else if ((alpha==0) & !(beta==0))#
		{	#
			if (pos==FALSE)#
			{demfun<-function(x){2*lamb0/(N0*exp(-lamb0*x-mu0/beta*(1-exp(beta*x))))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)/(N0*exp(-abs(lamb0)*x-abs(mu0)/beta*(1-exp(beta*x))))}}#
			} else {	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))-mu0/beta*(1-exp(beta*x))))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}#
	#
		#
	if (FALSE %in% is.finite(demfun(Vtimes)))#
	{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
	} else {	#
	integrals<-c()#
	demfunval<-c()#
	#
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
		}#
				#
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)#
		res<-sum(log(indLikelihood))#
		}		#
		}	#
		#
		return(list("res"=res,"all"=indLikelihood))#
}
#This code computes the likelihood of a given phylogeny under various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper), with parameters lamb0,alpha,mu0 and beta, and diversity N0#
getLikelihood.coalBD <- function(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)#
# The extinction rate is forced to be less than the speciation rate over the history of the clade#
{#
	Ttimes <- diff(Vtimes)#
	Vtimes <- Vtimes[2:length(Vtimes)]#
	nbint<-length(Ttimes)#
#	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1) # by=-1 shouldn't be necessary#
	samp<-seq((Ntips-2),(Ntips-nbint-1))#
	#
	times<-c(0,sort(Vtimes))#
	#
	if (min(abs(lamb0)*exp(alpha*times)-abs(mu0)*exp(beta*times))<=0)#
		{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
		}#
	#
	else if ((alpha==0) & (beta==0)) #
		{	if (pos==FALSE)#
			{r<-lamb0-mu0#
			indLikelihood<-samp*(samp+1)/2*2*lamb0/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*lamb0/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			else #
			{r<-abs(abs(lamb0)-abs(mu0))#
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			res<-sum(log(indLikelihood))#
			} else {		#
	if ((beta==0) & !(alpha==0))#
		{	#
			if (pos==FALSE) #
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))+mu0*x))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}#
			} else if ((alpha==0) & !(beta==0))#
		{	#
			if (pos==FALSE)#
			{demfun<-function(x){2*lamb0/(N0*exp(-lamb0*x-mu0/beta*(1-exp(beta*x))))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)/(N0*exp(-abs(lamb0)*x-abs(mu0)/beta*(1-exp(beta*x))))}}#
			} else {	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))-mu0/beta*(1-exp(beta*x))))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}#
	#
		#
	if (FALSE %in% is.finite(demfun(Vtimes)))#
	{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
	} else {	#
	integrals<-c()#
	demfunval<-c()#
	#
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
		}#
				#
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)#
		res<-sum(log(indLikelihood))#
		}		#
		}	#
		#
		return(list("res"=res,"all"=indLikelihood))#
}
getLikelihood.coalBD
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))
Rprof()
foo <- fitcoalBD(phylo,cst.lamb=TRUE)
summaryRprof()
#This code fits various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper) to a given phylogeny, by maximum likelihood, using the Nelder-Mead algorithm#
#Outputs are the log-likelihood, the second order Akaike's Information Criterion, and the maximum likelihood estimates of the parameters of diversification. Depending on the model, these parameters include a combination of the speciation rate at present (lamb0), the exponential variation in speciation rate (alpha), the extinction rate at present (mu0), the exponential variation in extinction rate (beta) and the extinction fraction (extinction rate/speciation rate, eps). See notations in the PloSB 2010 paper.#
#The code uses the ape package#
#The code uses the getLikelihood.coalBD code. use source("getLikelihood.coalBD.r") #
#
fitcoalBD<-function (phylo,lamb0=0.1,alpha=1,mu0=0.01,beta=0,meth = "Nelder-Mead",N0=0,cst.lamb=FALSE,cst.mu=FALSE,fix.eps=FALSE,mu.0=FALSE,pos=TRUE,Vtimes=FALSE)#
#
#The default settings allow to fit the most general model where the rates of speciation and extinction vary over time without a fixed extinction fraction (Model 4d from the PloSB 2010 paper). cst.lamb=TRUE forces the speciation rate to be constant over time (used to fit Models 3, 5 and 4b). cst.mu=TRUE forces the extinction rate to be constant over time (used to fit Models 3, and 4a). fix.eps forces the extinction fraction to be constant over time (used to fit Model 4c). mu.0=TRUE forces the extinction rate to 0 (used to fit Models 5 and 6).#
#pos=TRUE (the default) forces the rates of speciation and extinction to be positive. pos=FALSE removes this forcing.#
#
{#
	#
#lamb0=0.1;alpha=1;mu0=0.01;beta=0;N0=0;cst.lamb=FALSE;cst.mu=FALSE;fix.eps=FALSE;mu.0=FALSE;pos=TRUE;Vtimes=FALSE;meth = "Nelder-Mead";#
	#
	if (Vtimes==TRUE) {#
		Vtimes<-sort(phylo)#
		Ntips<-length(phylo)+1#
		if (N0==0) {N0<-Ntips}#
		} else {#
		Vtimes <- sort(branching.times(phylo))#
		Ntips<-Ntip(phylo)#
		if (N0==0) {N0<-Ntips}#
		}#
			 #
    nbobs<-length(Vtimes)-1#
			#
#
	#pure birth	constant rates (Model 5)	#
	if (mu.0==TRUE & cst.lamb==TRUE)#
	{init<-c(lamb0)}#
	#
	#birth-death constant rates	(Model 3)#
	else if (cst.mu==TRUE & cst.lamb==TRUE) #
    {init <- c(lamb0,mu0)}#
	#
	#pure birth varying speciation rate (Model 6)#
	else if (mu.0==TRUE & cst.lamb==FALSE)#
	{init<-c(lamb0,alpha)}#
		#
	#birth-death varying speciation rate (Model 4a)#
	else if (cst.mu==TRUE & cst.lamb==FALSE) #
    {init <- c(lamb0,alpha,mu0)}#
    	#
    #birth-death varying extinction rate (Model 4b)#
    else if (cst.mu==FALSE & cst.lamb==TRUE)#
   	{init <- c(lamb0,mu0,beta)}#
    #
    #birth-death varying speciation rate and constant extinction fraction (Model 4c)#
    else if (fix.eps==TRUE)#
    {init <- c(lamb0,alpha,mu0/lamb0)}#
    #
    #birth-death varying speciation and extinction rates (Model 4d)	#
    else#
    {init = c(lamb0,alpha,mu0,beta)}#
#
	nbpar<-length(init)#
	    	#
############################################################	#
    #
    if (mu.0==TRUE & cst.lamb==TRUE)#
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0=0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
        #
    else if (cst.mu==TRUE & cst.lamb==TRUE) #
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        mu0 <- init[2]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
    #
    else if (mu.0==TRUE & cst.lamb==FALSE)#
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0=0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
    #
    else if (cst.mu==TRUE & cst.lamb==FALSE) #
    {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta=0,N0,pos=pos)$res#
        return(-LH)}#
        }#
	#
	else if (cst.mu==FALSE & cst.lamb==TRUE)#
	{optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        mu0 <- init[2]#
        beta<- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha=0,mu0,beta,N0,pos=pos)$res#
        return(-LH)}#
        }#
     #
     else if (fix.eps==TRUE)#
     {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        eps <- init[3]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,d=lamb0*eps,beta=alpha,N0,pos=pos)$res#
        return(-LH)}#
        }#
        #
      else#
      #
     {optimLH.coalBD <- function(init) {#
        lamb0 <- init[1]#
        alpha <- init[2]#
        mu0 <- init[3]#
        beta <- init[4]#
        LH <- getLikelihood.coalBD(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=pos)$res#
        return(-LH)}#
        }#
  #
  #######################################################################################    #
   	#
   	temp <- optim(init, optimLH.coalBD, method = meth,control=list(ndeps=10^(-4)))#
#
		if (mu.0==TRUE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Pure birth constant speciation", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1])}#
    	else#
    	{res <- list(model = "Pure birth constant speciation", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]))}}#
        #
        else if (cst.mu==TRUE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant rates", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1],mu0 = temp$par[2])}#
    	else#
    	{res <- list(model = "Birth-death constant rates", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]),mu0 = abs(temp$par[2]))}}#
#
		else if (mu.0==TRUE & cst.lamb==FALSE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Pure birth varying speciation", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2])}#
    	else#
    	{res <- list(model = "Pure birth varying speciation", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2])}}#
        #
        else if (cst.mu==TRUE & cst.lamb==FALSE) #
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death varying speciation constant extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], mu0 = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death varying speciation constant extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], mu0 = abs(temp$par[3]))}}#
        #
        else if (cst.mu==FALSE & cst.lamb==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant speciation varying extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], mu0 = temp$par[2], beta = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death constant speciation varying extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), mu0 = abs(temp$par[2]), beta = temp$par[3])}}#
#
        else if (fix.eps==TRUE)#
        { #
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death constant extinction fraction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], eps = temp$par[3])}#
    	else#
    	{res <- list(model = "Birth-death constant extinction fraction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], eps = abs(temp$par[3]))}}#
        #
        else#
        {#
        if (pos==FALSE)#
    	{res <- list(model = "Birth-death varying speciation and extinction", LH = -temp$value, aicc = 2 * #
    	temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = temp$par[1], alpha = temp$par[2], mu0 = temp$par[3],beta = temp$par[4])}#
    	else#
    	{res <- list(model = "Birth-death varying speciation and extinction", LH = -temp$value, aicc = 2 * #
        temp$value + 2*nbpar + 2*nbpar*(nbpar+1)/(nbobs-nbpar-1), lamb0 = abs(temp$par[1]), alpha = temp$par[2], mu0 = abs(temp$par[3]),beta = temp$par[4])}}#
#
             #
        return(res)#
}
foo <- fitcoalBD(phylo,cst.lamb=TRUE)
foo
system.time(foo <- fitcoalBD(phylo,cst.lamb=TRUE))
for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
		}#
				#
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)#
		res<-sum(log(indLikelihood))#
		}		#
		}
integrals<-c()#
	demfunval<-c()#
	#
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
	}
integrals
demfunval
length(Vtimes)
Vtimes
		Vtimes <- sort(branching.times(phylo))
		Ntips<-Ntip(phylo)
N0<-Ntips
length(Vtimes)
integrals<-c()#
	demfunval<-c()#
	#
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
	}
integrals
demfunval
	samp<-seq((Ntips-2),(Ntips-nbint-1))
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)
samp
length(samp)
Rprof()
foo <- fitcoalBD(phylo,cst.lamb=TRUE)
summaryRprof()
samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1)
for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
	}
length(demfunval)
length(integrals)
foo <- fitcoalBD(phylo,cst.lamb=TRUE)
foo
fitcoalBD(phylo,cst.lamb=TRUE)
length(Vtimes)
	integrals<-c()
	demfunval<-c()
for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
	}
length(demfunval)
Vtimes
for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])}
demfunvali
	integrals<-c()#
	demfunval<-c()
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
	}
	integrals<-c()
	demfunval<-c()
I <- I
i <- 1
rm(I)
i
		demfunvali<-demfun(Vtimes[i])
demfunvali
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value
integrali
		demfunval<-c(demfunval,demfunvali)
demfunval
		integrals<-c(integrals,integrali)
integrals
i <- 2
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)
demfunval
length(Vtimes)
i <- 50
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)
i <- 51
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)
i <- 52
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)
i <- 53
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)
Vtimes
Vtimes[53]
Vtimes[i]-Ttimes[i]
Ttimes
demfun
integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)
i <- 54
		demfunvali<-demfun(Vtimes[i])
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value
i <- 99
		demfunvali<-demfun(Vtimes[i])
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value
i <- 98
		demfunvali<-demfun(Vtimes[i])
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value
phylo
plot(phylo)
node.labels()
node.label()
samp
length(samp)
length(Vtimes)
r<-abs(abs(lamb0)-abs(mu0))
r
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))
	if (min(abs(lamb0)*exp(alpha*times)-abs(mu0)*exp(beta*times))<=0)#
		{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
		} else if ((alpha==0) & (beta==0)) #
		{	if (pos==FALSE)#
			{r<-lamb0-mu0#
			indLikelihood<-samp*(samp+1)/2*2*lamb0/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*lamb0/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))#
			} else #
			{r<-abs(abs(lamb0)-abs(mu0))#
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			res<-sum(log(indLikelihood))#
			} else {		#
	if ((beta==0) & !(alpha==0))#
		{	#
			if (pos==FALSE) #
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))+mu0*x))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}#
			} else if ((alpha==0) & !(beta==0))#
		{	#
			if (pos==FALSE)#
			{demfun<-function(x){2*lamb0/(N0*exp(-lamb0*x-mu0/beta*(1-exp(beta*x))))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)/(N0*exp(-abs(lamb0)*x-abs(mu0)/beta*(1-exp(beta*x))))}}#
			} else {	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))-mu0/beta*(1-exp(beta*x))))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}
}
	if (min(abs(lamb0)*exp(alpha*times)-abs(mu0)*exp(beta*times))<=0)#
	{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
	} else if ((alpha==0) & (beta==0)) {#
		if (pos==FALSE)#
		{	r<-lamb0-mu0#
			indLikelihood<-samp*(samp+1)/2*2*lamb0/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*lamb0/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))#
		} else {#
			r<-abs(abs(lamb0)-abs(mu0))#
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			res<-sum(log(indLikelihood))#
		} else {		#
	if ((beta==0) & !(alpha==0))#
		{	#
			if (pos==FALSE) #
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))+mu0*x))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}#
			} else if ((alpha==0) & !(beta==0))#
		{	#
			if (pos==FALSE)#
			{demfun<-function(x){2*lamb0/(N0*exp(-lamb0*x-mu0/beta*(1-exp(beta*x))))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)/(N0*exp(-abs(lamb0)*x-abs(mu0)/beta*(1-exp(beta*x))))}}#
			} else {	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))-mu0/beta*(1-exp(beta*x))))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}
}
#This code computes the likelihood of a given phylogeny under various flavors of the birth-death model (Models 2 to 6 from the PloSB 2010 paper), with parameters lamb0,alpha,mu0 and beta, and diversity N0#
getLikelihood.coalBD <- function(Vtimes,Ntips,lamb0,alpha,mu0,beta,N0,pos=TRUE)#
# The extinction rate is forced to be less than the speciation rate over the history of the clade#
{#
	Ttimes <- diff(Vtimes)#
	Vtimes <- Vtimes[2:length(Vtimes)]#
	nbint<-length(Ttimes)#
	samp<-seq((Ntips-2),(Ntips-nbint-1),by=-1) # by=-1 shouldn't be necessary#
#	samp<-seq((Ntips-2),(Ntips-nbint-1))#
	#
	times<-c(0,sort(Vtimes))#
	#
	if (min(abs(lamb0)*exp(alpha*times)-abs(mu0)*exp(beta*times))<=0)#
	{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
	} else if ((alpha==0) & (beta==0)) {#
		if (pos==FALSE)#
		{	r<-lamb0-mu0#
			indLikelihood<-samp*(samp+1)/2*2*lamb0/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*lamb0/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))#
		} else {#
			r<-abs(abs(lamb0)-abs(mu0))#
			indLikelihood<-samp*(samp+1)/2*2*abs(lamb0)/N0*1/(exp(-r*Vtimes))*exp(-samp*(samp+1)/2*2*abs(lamb0)/N0/r*exp(r*Vtimes)*(1-exp(-r*Ttimes)))}#
			res<-sum(log(indLikelihood))#
		} else {		#
	if ((beta==0) & !(alpha==0))#
		{	#
			if (pos==FALSE) #
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))+mu0*x))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))+abs(mu0)*x))}}#
			} else if ((alpha==0) & !(beta==0))#
		{	#
			if (pos==FALSE)#
			{demfun<-function(x){2*lamb0/(N0*exp(-lamb0*x-mu0/beta*(1-exp(beta*x))))}#
			} else {#
				demfun<-function(x){2*abs(lamb0)/(N0*exp(-abs(lamb0)*x-abs(mu0)/beta*(1-exp(beta*x))))}}#
			} else {	if (pos==FALSE)#
			{demfun<-function(x){2*lamb0*exp(alpha*x)/(N0*exp(lamb0/alpha*(1-exp(alpha*x))-mu0/beta*(1-exp(beta*x))))}}#
			else {demfun<-function(x){2*abs(lamb0)*exp(alpha*x)/(N0*exp(abs(lamb0)/alpha*(1-exp(alpha*x))-abs(mu0)/beta*(1-exp(beta*x))))}}#
			}#
	#
		#
	if (FALSE %in% is.finite(demfun(Vtimes)))#
	{#
		indLikelihood<-0*vector(length=length(samp))#
		res<-sum(log(indLikelihood))#
	} else {	#
	integrals<-c()#
	demfunval<-c()#
	#
	for (i in 1:length(Vtimes))#
	{	#
		demfunvali<-demfun(Vtimes[i])#
		integrali<-integrate(demfun,(Vtimes[i]-Ttimes[i]),Vtimes[i],stop.on.error=FALSE)$value#
		#
		demfunval<-c(demfunval,demfunvali)#
		integrals<-c(integrals,integrali)#
	}#
				#
		indLikelihood<-samp*(samp+1)/2*demfunval*exp(-samp*(samp+1)/2*integrals)#
		res<-sum(log(indLikelihood))#
		}		#
		}	#
		#
		return(list("res"=res,"all"=indLikelihood))#
}
foo <- fitcoalBD(phylo,cst.lamb=TRUE)
fitcoalBD(phylo,cst.lamb=TRUE)
clean <- read.table("/Users/josephwb/Projects/R_working/turboMEDUSA/turboMEDUSA/All_clean.txt", header=T)
clean
data <- clean
maxTree<-max(data[,1])
maxTree
sets<-character(length=maxTree)#
for(i in 1:maxTree) {#
	ok<-data[,1]==i#
	sets[i]<-paste(sort(data[ok,5]), collapse="")#
	}#
	#
sets<-as.factor(sets)#
#
table(sets)
for(i in levels(sets)) {#
	cat("Set: ", i, "Trees: \n")#
	print(which(sets==i))#
	}#
#
for(i in levels(sets)[-1]) {#
	trees<-which(sets==i)#
	ok<-data[,1]%in%trees#
	write.csv(file="Data_in_sets.txt", data[ok,], append=T)#
	}#
#
# This part will give you statistics about everything#
#
for(i in levels(sets)[-1]) {#
	trees<-which(sets==i)#
	ok<-data[,1]%in%trees#
	dd<-data[ok,]#
	mm<-aggregate(dd[,3:4], by=list(dd[,5]), FUN=mean)#
	vv<-aggregate(dd[,3:4], by=list(dd[,5]), FUN=var)#
	nn<-aggregate(dd[,3:4], by=list(dd[,5]), FUN=length)#
	res<-cbind(mm, vv[,-1], nn[,2])#
	colnames(res)[2:6]<-c("diver_mean", "extinc_mean", "diver_var", "extinc_var", "n")#
	print(res)#
#
	}
levels(sets)
sets<-character(length=maxTree)#
for(i in 1:maxTree) {#
	ok<-data[,1]==i#
	sets[i]<-paste(sort(data[ok,5]), collapse="")#
	}#
	#
sets<-as.factor(sets)
sets
table(sets)
for(i in levels(sets)) {#
	cat("Set: ", i, "Trees: \n")#
	print(which(sets==i))#
	}#
#
for(i in levels(sets)[-1]) {#
	trees<-which(sets==i)#
	ok<-data[,1]%in%trees#
	write.csv(file="Data_in_sets.txt", data[ok,], append=T)#
	}
setwd("/Users/josephwb/Projects/R_working/turboMEDUSA/turboMEDUSA")
maxTree<-max(data[,1])#
#
sets<-character(length=maxTree)#
for(i in 1:maxTree) {#
	ok<-data[,1]==i#
	sets[i]<-paste(sort(data[ok,5]), collapse="")#
	}#
	#
sets<-as.factor(sets)#
#
table(sets)	#
#
for(i in levels(sets)) {#
	cat("Set: ", i, "Trees: \n")#
	print(which(sets==i))#
	}#
#
for(i in levels(sets)[-1]) {#
	trees<-which(sets==i)#
	ok<-data[,1]%in%trees#
	write.csv(file="Data_in_sets.txt", data[ok,], append=T)#
	}
rm(list=ls())
clean <- read.table("/Users/josephwb/Projects/R_working/turboMEDUSA/turboMEDUSA/All_clean.txt", header=T)
clean
maxTree<-max(data[,1])#
#
sets<-character(length=maxTree)#
for(i in 1:maxTree) {#
	ok<-data[,1]==i#
	sets[i]<-paste(sort(data[ok,5]), collapse="")#
	}#
	#
sets<-as.factor(sets)#
#
table(sets)	#
#
for(i in levels(sets)) {#
	cat("Set: ", i, "Trees: \n")#
	print(which(sets==i))#
	}#
#
for(i in levels(sets)[-1]) {#
	trees<-which(sets==i)#
	ok<-data[,1]%in%trees#
	write.csv(file="Data_in_sets.txt", data[ok,], append=T)#
	}
data <- clean
data
maxTree<-max(data[,1])#
#
sets<-character(length=maxTree)#
for(i in 1:maxTree) {#
	ok<-data[,1]==i#
	sets[i]<-paste(sort(data[ok,5]), collapse="")#
	}#
	#
sets<-as.factor(sets)#
#
table(sets)	#
#
for(i in levels(sets)) {#
	cat("Set: ", i, "Trees: \n")#
	print(which(sets==i))#
	}#
#
for(i in levels(sets)[-1]) {#
	trees<-which(sets==i)#
	ok<-data[,1]%in%trees#
	write.csv(file="Data_in_sets.txt", data[ok,], append=T)#
	}
