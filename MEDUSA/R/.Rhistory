richness <- read.csv("~/Projects/R_working/Help/Lynsey/medusadata290512.txt")
richness <- richness[,2:3]
richness
write.csv(richness,file="Lynsey.richness.csv")
res <- MEDUSA(phy, richness)
phy$edges
phy$edge
attribute(phy)
attributes(phy)
phy$edge.length
min(phy$edge.length)
prepareData <- function (phy, richness, verbose)#
{#
	if (is.null(richness)) { #
		richness <- data.frame(taxon=phy$tip.label, n.taxa=1);#
	}#
#
	if (!is.null(richness$exemplar))#
	{#
		i.na <- is.na(richness$exemplar);#
		phy$tip.label[match(richness$exemplar[!i.na], phy$tip.label)] <- as.character(richness$taxon[!i.na]);#
	}#
	if (length(richness[1,]) == 2)#
	{#
		if (colnames(richness)[1] != "taxon" || colnames(richness)[2] != "n.taxa")#
		{#
			if (class(richness[,1]) == "factor" & class(richness[,2]) == "integer")#
			{#
				colnames(richness) = c("taxon", "n.taxa");#
			} else if (class(richness[,1]) == "integer" & class(richness[,2]) == "factor")#
			{#
				colnames(richness) = c("n.taxa", "taxon");#
			} else {#
				stop("MEDUSA thinks your richness data is in an incorrect format. See ?MEDUSA.\n");#
			}#
		}#
	}#
	if (class(phy) != "phylo") {stop("\n\nWARNING: tree is not of class \"phylo\". Stopping.\n");}#
	temp <- richness[, "n.taxa"];#
	names(temp) <- richness[, "taxon"];#
	pruned <- treedata(phy, temp, warnings=verbose)  #
	if (length(pruned$phy$tip.label) == 0) {#
		cat("\n\nWARNING: MEDUSA encountered a serious error. Tree has no tips after processing richness information! \nIt is likely that an incorrect richness file is being used. \nAnalysis cannot proceed. Please examine the information below to identify the error.\\nn");#
		cat("\nTree tip labels:\n");#
		print(phy$tip.label);#
		cat("\nRichness taxon labels:\n");#
		print(as.character(richness[, "taxon"]));#
		stop;#
	}#
	phy <- pruned$phy;#
	return(list(phy=phy, richness=richness));#
}#
configureModel <- function (model, epsilon, r, b, d, initialR, initialE)#
{#
	sp <- NULL;#
	fixPar <- NULL;#
	if (!is.null(epsilon)) #
	{#
		if (epsilon <= 0 | epsilon >= 1) {stop("\n\nWARNING: value of epsilon (", epsilon, ") is invalid; must be > 0 and < 1. Stopping analysis.\n", sep="");}#
		sp <- c(initialR, epsilon);#
		fixPar <- epsilon;#
		model <- "fixedEpsilon";#
	} else if (!is.null(r)) #
	{#
		if (r <= 0) {stop("\n\nWARNING: value of r (", r, ") is invalid; must be > 0. Stopping analysis.\n", sep="");}#
		sp <- c(r, initialE);#
		fixPar <- r;#
		model <- "fixedR";#
	} else if (!is.null(d)) #
	{#
		if (d <= 0) {stop("\n\nWARNING: value of d (", d, ") is invalid; must be > 0. Stopping analysis.\n", sep="");}#
		sp <- c(initialR, d);#
		fixPar <- d;#
		model <- "fixedD";#
	} else if (!is.null(b)) #
	{#
		if (b <= 0) {stop("\n\nWARNING: value of b (", b, ") is invalid; must be > 0. Stopping analysis.\n", sep="");}#
		sp <- c((b/2), initialE);#
		fixPar <- b;#
		model <- "fixedB";#
	} else {#
		sp <- c(initialR, initialE);#
	}#
	return(list(model=model, sp=sp, fixPar=fixPar))#
}#
getMaxModelLimit <- function (richness, modelLimit, model, stop)#
{#
	samp.size <- (2*length(richness[,1]) - 1)#
	if (model == "bd" || model == "mixed")#
	{#
		max.modelLimit <- as.integer(samp.size/3) - ((!(samp.size %% 3)) * 1);#
	} else {#
		max.modelLimit <- as.integer(samp.size/2) - ((!(samp.size %% 2)) * 1); #
	}#
	if (stop == "modelLimit")#
	{#
		if (modelLimit > max.modelLimit) {modelLimit <- max.modelLimit;}#
		cat("Limiting consideration to ", modelLimit, " piecewise", sep="");#
		if (model == "bd") {#
			cat(" birth-death models")#
		} else if (model == "mixed") {#
			cat(" mixed models")#
		} else if (model == "yule") {#
			cat(" pure-birth (Yule) models");#
		} else {#
			cat(" diversification models")#
		}#
		cat(".\n\n");#
	}#
	return(modelLimit);#
}#
getThreshold <- function (treeSize, fixThreshold, stop)#
{#
	a = -3.5941052380332650E+01;#
	b =  6.7372587299747000E+00;#
	c = -1.0061508340754866E-01;#
	Offset =  2.7516678664333408E+01;#
	threshold <- a * (treeSize-b)^c + Offset;#
	if (threshold < 0 || is.nan(threshold)) threshold <- 0;#
	if (!is.null(fixThreshold))#
	{#
		if (is.nan(fixThreshold) || class(fixThreshold) != "numeric" || fixThreshold < 0)#
		{#
			cat("Provided threshold value of '", fixThreshold, "' is invalid.\n", sep="")#
			cat("Will proceed with value determined from simulations.\n")#
			cat("Appropriate AICc threshold for tree of ", treeSize, " tips is: ", threshold, ".\n", sep="");#
			return(threshold);#
		} else {#
			cat("Using provided threshold value of ", fixThreshold, ".\n", sep="")#
			cat("From simulations, appropriate AICc threshold for tree of ", treeSize, " tips would be: ", threshold, ".\n", sep="");#
			return(fixThreshold);#
		}#
	} else {#
		if (stop == "threshold") {#
			cat("Using AIC-threshold as analysis-terminating criterion.\n");#
			cat("Appropriate threshold for tree of ", treeSize, " tips is: ", threshold, ".\n\n", sep="");#
		}#
		return(threshold);#
	}#
}#
makeCacheMedusa <- function (phy, richness, all.nodes, shiftCut, mc, numCores, verbose=TRUE)#
{#
	n.tips <- length(phy$tip.label);#
	n.int <- nrow(phy$edge) - n.tips;#
	i.int <- seq_len(n.int);#
	interior <- phy$edge[,2] %in% phy$edge[,1];#
	bt <- branching.times(phy);#
	if (n.int > 0)#
	{#
		edges.int <- matrix(phy$edge[interior,], nrow=n.int, ncol=2); #
		colnames(edges.int) <- c("anc", "dec");#
		t.0 <- bt[match(edges.int[,1], (n.tips+1):max(edges.int))];#
		t.1 <- c(t.0[i.int] - phy$edge.length[interior]);#
		z.internal <- cbind(edges.int, t.0, t.1, t.len=t.0 - t.1,#
			n.0=rep(1, n.int), n.t=rep(NA, n.int));#
	}#
	edges.pendant <- phy$edge[match(seq_len(n.tips), phy$edge[,2]),];#
	colnames(edges.pendant) <- c("anc", "dec");#
	t.0 <- bt[match(edges.pendant[,1], (n.tips+1):max(edges.pendant))];#
	t.1 <- rep(0, n.tips);#
#
	ext.richness <- richness$n.taxa[match(phy$tip.label, richness$taxon)];#
	z.pendant <- cbind(edges.pendant, t.0, t.1, t.len=t.0 - t.1,#
		n.0=rep(1, n.tips), n.t=ext.richness);#
	if (n.int > 0)#
	{#
		z <- rbind(z.internal, z.pendant);#
	} else { #
		z <- z.pendant;#
	}#
	z <- cbind(z, partition=rep(1, length(z[,1]))); #
	rownames(z) <- NULL;#
	if (any(z[,"t.len"] == 0)) {stop("\n\nWARNING: zero-length branches encountered. Stopping.\n");}#
	all.edges <- as.matrix(z[,c("anc","dec")]);#
	desc.stem <- list();#
	desc.node <- list();#
	if (verbose) cat("  Gathering descendant node information...");#
	if (mc)#
	{#
		if (shiftCut == "both" || shiftCut == "stem")#
		{#
			desc.stem <- mclapply(seq_len(max(all.edges)), descendantsCutAtStem.idx, all.edges=all.edges, mc.cores=numCores);#
		}#
		if (shiftCut == "both" || shiftCut == "node")#
		{#
			if (!is.null(desc.stem))#
			{#
				root <- min(z[,"anc"]);#
				desc.node <- mclapply(desc.stem, stripStem, mc.cores=numCores);#
				desc.node[root] <- desc.stem[root];#
			} else {#
				desc.node <- mclapply(seq_len(max(all.edges)), descendantsCutAtNode.idx, all.edges=all.edges, mc.cores=numCores);#
			}#
		}#
	} else {#
		if (shiftCut == "both" || shiftCut == "stem")#
		{#
			desc.stem <- lapply(seq_len(max(all.edges)), descendantsCutAtStem.idx, all.edges=all.edges);#
		}#
		if (shiftCut == "both" || shiftCut == "node")#
		{#
			if (!is.null(desc.stem))#
			{#
				root <- min(z[,"anc"]);#
				desc.node <- lapply(desc.stem, stripStem);#
				desc.node[root] <- desc.stem[root];#
			} else {#
				desc.node <- lapply(seq_len(max(all.edges)), descendantsCutAtNode.idx, all.edges=all.edges);#
			}#
		}#
	}#
	if (verbose) cat(" done.\n");#
	num.tips <- list()#
	if (verbose) cat("  Gathering tip richness information...");#
	if (mc)#
	{#
		num.tips <- mclapply(all.nodes, getNumTips, phy=phy, totalTips=n.tips, mc.cores=numCores);#
	} else {#
		num.tips <- lapply(all.nodes, getNumTips, phy=phy, totalTips=n.tips);#
	}#
	if (verbose) cat(" done.\n");#
	res <- list(z=z, desc.stem=desc.stem, desc.node=desc.node, num.tips=num.tips);#
	return(res);#
}#
getNumTips <- function (node, phy, totalTips=NULL)#
{#
	if (is.null(totalTips)) totalTips <- length(phy$tip.label);#
	if (node <= totalTips) return(1);#
	n <- 0;#
	d <- phy$edge[which(phy$edge[, 1] == node), 2];#
	for (j in d) {#
		if (j <= totalTips) {#
			n <- n + 1;#
		} else {#
			n <- n + getNumTips(j, phy, totalTips);#
		}#
	}#
	return(n);#
}#
descendantsCutAtStem <- function (node, all.edges)#
{#
	ans <- numeric();#
	ans <- node;#
	repeat {#
		node <- all.edges[all.edges[,1] %in% node,2];#
		if (length(node) > 0) {#
			ans <- c(ans, node);#
		} else {break;}#
	}#
	return(ans);#
}#
descendantsCutAtStem.idx <- function (node.list, all.edges)#
{#
	which(all.edges[,1] == node.list | all.edges[,2] %in% descendantsCutAtStem(node.list, all.edges));#
}#
stripStem <- function (x)#
{#
	y <- unlist(x);#
	return(y[-1]);#
}#
descendantsCutAtNode <- function (node, all.edges)#
{#
	ans <- numeric();#
	repeat {#
		node <- all.edges[all.edges[,1] %in% node,2];#
		if (length(node) > 0)#
		{#
			ans <- c(ans, node);#
		} else {break;}#
	}#
	return(ans);#
}#
descendantsCutAtNode.idx <- function (node.list, all.edges)#
{#
	which(all.edges[,1] == node.list | all.edges[,2] %in% descendantsCutAtNode(node.list, all.edges));#
}#
check.multicore <- function () #
{#
    tmp = rownames(installed.packages());#
    if ("multicore" %in% tmp)#
    {#
        require(multicore);#
        return(TRUE);#
    } else {#
        return(FALSE);#
    }#
}#
#
check.colorspace <- function () #
{#
    tmp = rownames(installed.packages());#
    if ("colorspace" %in% tmp)#
    {#
        require(colorspace);#
        return(TRUE);#
    } else {#
        return(FALSE);#
    }#
}#
checkValidArguments <- function (phy, richness, model, modelLimit, stop, shiftCut, criterion, stepBack,#
	preserveModelFlavour, epsilon, r, b, d, fixThreshold, initialR, initialE,#
	verbose, mc, numCores)#
{#
	if (class(phy) != "phylo" && class(phy) != "multiPhylo") {stop("\n\nWARNING: tree is not of class \"phylo\". Stopping.\n");}#
	model=match.arg(model, choices=c("mixed", "bd", "yule"));#
	stop=match.arg(stop, choices=c("threshold","modelLimit"));#
	shiftCut=match.arg(shiftCut, choices=c("both", "stem", "node"));#
	criterion=match.arg(criterion, choices=c("aicc", "aic"));#
	if (class(stepBack) != "logical") {stop("\n\nWARNING: argument \"stepBack\"is not of class \"logical\". Stopping.\n");}#
	if (class(preserveModelFlavour) != "logical") {stop("\n\nWARNING: argument \"preserveModelFlavour\"is not of class \"logical\". Stopping.\n");}#
	if (class(verbose) != "logical") {stop("\n\nWARNING: argument \"verbose\"is not of class \"logical\". Stopping.\n");}#
	if (class(mc) != "logical") {stop("\n\nWARNING: argument \"mc\" is not of class \"logical\". Stopping.\n");}#
	if (mc)#
	{#
		if (Sys.info()["sysname"] == "Windows")#
		{#
			stop("\"mc\" argument requested, but package \"multicore\" is not available for Windows. Stopping.\n");#
		}#
		if (!is.na(Sys.getenv()["R_GUI_APP_VERSION"]))#
		{#
			stop("\"mc\" argument requested, but package \"multicore\" cannot be run in a GUI environment. Stopping.\n");#
		}#
		if (!check.multicore())#
		{#
			stop("\"mc\" argument requested, but package \"multicore\" is not installed. Stopping.\n");#
		}#
	}#
	if (class(modelLimit) != "numeric" && class(modelLimit) != "NULL") {stop("\n\nWARNING: argument \"modelLimit\"is not valid. Expecting 'NULL' or numeric. Stopping.\n");}#
	if (class(epsilon) != "numeric" && class(epsilon) != "NULL") {stop("\n\nWARNING: argument \"epsilon\"is not valid. Expecting 'NULL' or numeric. Stopping.\n");}#
	if (class(r) != "numeric" && class(r) != "NULL") {stop("\n\nWARNING: argument \"r\"is not valid. Expecting 'NULL' or numeric. Stopping.\n");}#
	if (class(b) != "numeric" && class(b) != "NULL") {stop("\n\nWARNING: argument \"b\"is not valid. Expecting 'NULL' or numeric. Stopping.\n");}#
	if (class(d) != "numeric" && class(d) != "NULL") {stop("\n\nWARNING: argument \"d\"is not valid. Expecting 'NULL' or numeric. Stopping.\n");}#
	if (class(fixThreshold) != "numeric" && class(fixThreshold) != "NULL") {stop("\n\nWARNING: argument \"fixThreshold\"is not valid. Expecting 'NULL' or numeric. Stopping.\n");}#
	if (class(initialR) != "numeric" && class(initialR) != "NULL") {stop("\n\nWARNING: argument \"initialR\"is not valid. Expecting 'NULL' or numeric. Stopping.\n");}#
	if (class(initialE) != "numeric" && class(initialE) != "NULL") {stop("\n\nWARNING: argument \"initialE\"is not valid. Expecting 'NULL' or numeric. Stopping.\n");}#
	if (class(numCores) != "numeric" && class(numCores) != "NULL") {stop("\n\nWARNING: argument \"numCores\"is invalid. Expecting 'NULL' or numeric. Stopping.\n");}#
}
dat <- prepareData(phy, richness, T)
dat
fixThreshold=NULL
mc=F
mc
model="mixed"; modelLimit=20; stop="threshold";#
	shiftCut="both"; criterion="aicc"; stepBack=TRUE; preserveModelFlavour=FALSE; epsilon=NULL; r=NULL;#
	b=NULL; d=NULL; fixThreshold=NULL; initialR=0.05; initialE=0.5; verbose=TRUE; mc=FALSE; numCores=NULL
threshold <- getThreshold(treeSize=length(phy$tip.label), fixThreshold=fixThreshold, stop=stop);#
		modelLimit <- getMaxModelLimit(richness=richness, modelLimit=modelLimit, model=model, stop=stop);#
		cat("Preparing data for analysis:\n");#
		pend.nodes <- seq_len(length(phy$tip.label));   #
		int.nodes <- unique(phy$edge[,1])[-1]; #
		root.node <- length(phy$tip.label) + 1;#
		all.nodes <- c(pend.nodes, root.node, int.nodes);#
		obj <- makeCacheMedusa(phy=phy, richness=richness, all.nodes=all.nodes, shiftCut=shiftCut, mc=mc, numCores=numCores);#
		desc <- list(stem=obj$desc.stem, node=obj$desc.node);#
		z <- obj$z;#
		num.tips <- obj$num.tips;
z
phy
(2*1961) -2
length(phy$edge[,1])
require(geiger)
phy <- read.tree("~/Projects/R_working/Help/Lynsey/medusatree290512.tre")
binary.phy <- multi2di(phy)
?write.tree
write.tree(binary.phy, file="binary.phy.tre")
richness <- read.csv("~/Projects/R_working/Help/Lynsey/Lynsey.richness.csv")
require(MEDUSA)
res <- MEDUSA(binary.phy, richness)
george <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Ashwell_Scofield_2008_BBE_paleognaths.csv")
george
head(geogre)
george <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/George_BRAAAIIINNNS.csv")
cornfield2011 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Cornfield_2011_PLoSONE_parrots.csv")
ashwell2008 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Ashwell_Scofield_2008_BBE_paleognaths.csv")
ls()
head(george)
ashwell2008[,"SCIENTIFIC.IOC"]
ashwell2008
ashwell2008[,"Scientific"]
head("ashwell2008")
ashwell2008[,1:2]
ashwell2008[,1:4]
ashwell2008[,1:5]
ashwell2008[,6]
cornfield2011[,"SCIENTIFIC.IOC"]
george[,"SCIENTIFIC.IOC"]
guay2008[,"SCIENTIFIC.IOC"]
iwaniuk2006BBE[,"SCIENTIFIC.IOC"]
iwaniuk2006JCP[,"SCIENTIFIC.IOC"]
iwaniuk2008JCP[,"SCIENTIFIC.IOC"]
iwaniuk2009BBE[,"SCIENTIFIC.IOC"]
mlikovsky1989[,"SCIENTIFIC.IOC"]
mlikovsky2003[,"SCIENTIFIC.IOC"]
rehkamper1991[,"SCIENTIFIC.IOC"]
schuckpaim2008[,"SCIENTIFIC.IOC"]
head(ashwell2008)
head(cornfield2011)
ashwell2008 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Ashwell_Scofield_2008_BBE_paleognaths.csv");#
cornfield2011 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Cornfield_2011_PLoSONE_parrots.csv");#
george <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/George_BRAAAIIINNNS.csv");#
guay2008 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Guay_Iwaniuk_2008_AJZ_ducks.csv");#
iwaniuk2006BBE <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Iwaniuk_2006_BBE.csv");#
iwaniuk2006JCP <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Iwaniuk_2006_JCompPhys_strig_caprimulg.csv");#
iwaniuk2009BBE <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Iwaniuk_2009_BBE.csv");#
#
iwaniuk2008JCP <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Iwaniuk_et_al_2008_JCompPhys.csv");#
mlikovsky1989 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Mlikovsky_1989-1990.csv");#
mlikovsky2003 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Mlikovsky_2003_ASZB.csv");#
rehkamper1991 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Rehkamper_1991_BBE_hummingbirds.csv");#
schuckpaim2008 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Schuck.Paim_2008_BBE_parrots.csv");#
#
scientific.IOC <- c(ashwell2008[,"SCIENTIFIC.IOC"], cornfield2011[,"SCIENTIFIC.IOC"], george[,"SCIENTIFIC.IOC"], guay2008[,"SCIENTIFIC.IOC"], iwaniuk2006BBE[,"SCIENTIFIC.IOC"], iwaniuk2006JCP[,"SCIENTIFIC.IOC"], iwaniuk2008JCP[,"SCIENTIFIC.IOC"], iwaniuk2009BBE[,"SCIENTIFIC.IOC"], mlikovsky1989[,"SCIENTIFIC.IOC"], mlikovsky2003[,"SCIENTIFIC.IOC"], rehkamper1991[,"SCIENTIFIC.IOC"], schuckpaim2008[,"SCIENTIFIC.IOC"]);
head(iwaniuk2006JCP)
ashwell2008 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Ashwell_Scofield_2008_BBE_paleognaths.csv");#
cornfield2011 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Cornfield_2011_PLoSONE_parrots.csv");#
george <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/George_BRAAAIIINNNS.csv");#
guay2008 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Guay_Iwaniuk_2008_AJZ_ducks.csv");#
iwaniuk2006BBE <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Iwaniuk_2006_BBE.csv");#
iwaniuk2006JCP <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Iwaniuk_2006_JCompPhys_strig_caprimulg.csv");#
iwaniuk2009BBE <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Iwaniuk_2009_BBE.csv");#
#
iwaniuk2008JCP <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Iwaniuk_et_al_2008_JCompPhys.csv");#
mlikovsky1989 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Mlikovsky_1989-1990.csv");#
mlikovsky2003 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Mlikovsky_2003_ASZB.csv");#
rehkamper1991 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Rehkamper_1991_BBE_hummingbirds.csv");#
schuckpaim2008 <- read.csv("~/Projects/BRAAAIIINNNSSS!!!/Bird_Data/Brain_volume/Schuck.Paim_2008_BBE_parrots.csv");
colnames(ashwell2008)[1] <- "SCIENTIFIC.IOC"
scientific.IOC <- c(ashwell2008[,"SCIENTIFIC.IOC"], cornfield2011[,"SCIENTIFIC.IOC"], george[,"SCIENTIFIC.IOC"], guay2008[,"SCIENTIFIC.IOC"], iwaniuk2006BBE[,"SCIENTIFIC.IOC"], iwaniuk2006JCP[,"SCIENTIFIC.IOC"], iwaniuk2008JCP[,"SCIENTIFIC.IOC"], iwaniuk2009BBE[,"SCIENTIFIC.IOC"], mlikovsky1989[,"SCIENTIFIC.IOC"], mlikovsky2003[,"SCIENTIFIC.IOC"], rehkamper1991[,"SCIENTIFIC.IOC"], schuckpaim2008[,"SCIENTIFIC.IOC"]);
head(rehkamper1991)
rehkamper1991
setwd("MEDUSA/R")
require(geiger);#
source("fitSisters.R");source("fitUserNode.R");source("MEDUSA-utilities.R");source("MEDUSA.R");source("medusaSummary.R");source("plotPrettyTree.R");source("prepareData.R");#
richness=NULL; model="mixed"; modelLimit=20; stop="threshold"; shiftCut="both"; criterion="aicc"; stepBack=TRUE; preserveModelFlavour=FALSE; epsilon=NULL; r=NULL; b=NULL; d=NULL; fixThreshold=NULL; initialR=0.05; initialE=0.5; verbose=TRUE; mc=FALSE; numCores=NULL;
phy <- read.nexus("~/Projects/Assiting_projects/Tania/Final_dating_Cacti/MAPtree.nex")
richness <- read.csv("~/Projects/Assiting_projects/Tania/Final_dating_Cacti/cactidiversity.csv")
results <- MEDUSA(phy, richness)
medusaSummary(results)
medusaSummary(results) -> barf
plotPrettyTree(barf)
plotPrettyTree(barf, node.labels=T)
